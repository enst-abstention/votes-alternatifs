(**************************************************************************)
(*                                BELENIOS                                *)
(*                                                                        *)
(*  Copyright Â© 2012-2021 Inria                                           *)
(*                                                                        *)
(*  This program is free software: you can redistribute it and/or modify  *)
(*  it under the terms of the GNU Affero General Public License as        *)
(*  published by the Free Software Foundation, either version 3 of the    *)
(*  License, or (at your option) any later version, with the additional   *)
(*  exemption that compiling, linking, and/or using OpenSSL is allowed.   *)
(*                                                                        *)
(*  This program is distributed in the hope that it will be useful, but   *)
(*  WITHOUT ANY WARRANTY; without even the implied warranty of            *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     *)
(*  Affero General Public License for more details.                       *)
(*                                                                        *)
(*  You should have received a copy of the GNU Affero General Public      *)
(*  License along with this program.  If not, see                         *)
(*  <http://www.gnu.org/licenses/>.                                       *)
(**************************************************************************)

type json <ocaml module="Yojson.Safe" t="t"> = abstract
type number <ocaml predef from="Belenios_core.Serializable_builtin"> = abstract
type uuid <ocaml predef from="Belenios_core.Serializable_builtin"> = abstract
type question <ocaml module="Belenios_core.Question"> = abstract

type ('a, 'b) wrapped_pubkey = {
  group : 'a;
  y : 'b;
} <ocaml field_prefix="wpk_">
<doc text="A public key wrapped with its group parameters.">

type 'a params = {
  description : string;
  name : string;
  public_key : 'a;
  questions : question list <ocaml repr="array">;
  uuid : uuid;
  ?administrator : string option;
  ?credential_authority : string option;
} <ocaml field_prefix="e_">
<doc text="Election parameters relevant for creating a ballot.">

type 'a signature = {
  public_key : 'a;
  challenge : number;
  response : number;
} <ocaml field_prefix="s_">

type 'a ballot = {
  answers : json list <ocaml repr="array">;
  election_hash : string;
  election_uuid : uuid;
  ?signature : 'a signature option;
}
